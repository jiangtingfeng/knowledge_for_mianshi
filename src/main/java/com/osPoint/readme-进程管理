进程与线程
    1.进程
        进程是资源分配的基本单位
            进程控制块（Process Control Block, PCB） 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对PCB的操作。
            下图显示了4个程序创建了4个进程，这4个进程可以并发地执行。 -- 在一段时间内进行并发运行
                            Four program counters
                          A!      B!      C!      D!
    2.线程
        线程是独立调度的基本单位。
        一个进程中可以有多个线程，他们共享进程资源
        QQ和浏览器是两个进程，浏览器进程里面有很多线程例如HTTP请求线程、事件响应线程、渲染线程等等，
        线程的并发执行使得在浏览器中点击一个新链接从而发起HTTP求情超时，浏览器还可以响应用户的其他事件。
    3.区别
        Ⅰ拥有资源   进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。
        Ⅱ调度  线程是独立调度的基本单位，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。
        Ⅲ 系统开销
            由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。
            类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，
            而线程切换时只需保存和设置少量寄存器内容，开销很小。
        Ⅳ 通信方面
            线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。
进程状态的切换
    进程初始化
    就绪等待（ready）:  等待被调度
    运行状态（running）
    阻塞状态（writing）:等待资源
  应该注意一下内容
    只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；
        而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。
进程调度算法
    不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。
    1.批处理系统
          批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。
          1.1 先来先服务 first-come first-serverd（FCFS）
            非抢占式的调度算法，按照请求的顺序进行调度。
            有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，
            而长作业又需要执行很长时间，造成了短作业等待时间过长。
          1.2 短作业优先 shortest job first（SJF）
            非抢占式的调度算法，按估计运行时间最短的顺序进行调度。
            长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。
          1.3 最短剩余时间优先 shortest remaining time next（SRTN）
            最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。
            如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。
    2.交互式系统
        交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。
            2.1 时间片轮转
                 将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，
                 并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。
                时间片轮转算法的效率和时间片的大小有很大关系：
                    因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。
                    而如果时间片过长，那么实时性就不能得到保证。

    3.实时系统
进程同步
    1.临界区
    2.同步与互斥
    3.信号量
    4.管程
经典同步问题
    1.哲学家进餐问题
    2.读者-写者问题
进程通信
    1.管道
    2.FIFO
    3.消息队列
    4.信号量
    5.共享存储
    6.套接字