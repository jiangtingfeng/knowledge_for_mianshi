Java 的 I/O 大概可以分成以下几类：
一、概述
    磁盘操作：File
    字节操作：InputStream 和 OutputStream
    字符操作：Reader 和 Writer
    对象操作：Serializable
    网络操作：Socket
    新的输入/输出：NIO


装饰者模式：
                             InputStream
fileInputStream    pipedInputStream  byteArrayInputStream  FilterInputStream
                                                          /
                                                         /
                                                      DataInputStream     BufferedInputStream   PushBackInputStream
实例化一个具有缓存功能的字节流对象时，只需要在FileInputStream对象上再套一层BufferInputStream对象即可。
    FileInputStream fileInputStream = new FileInputStream(filePath);
    BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
DataInputStream 装饰者提供了对更多数据类型进行输入的操作，比如int、double等基本操作。

四、字符操作
    编码与解码
        编码就是把字符转换为字节，而解码是把字节重新组合成字符。
        如果编码和解码过程使用不同的编码方式那么就出现了乱码。
            GBK 编码中，中文字符占 2 个字节，英文字符占 1 个字节；
            UTF-8 编码中，中文字符占 3 个字节，英文字符占 1 个字节；
            UTF-16be 编码中，中文字符和英文字符都占 2 个字节。
        UTF-16be 中的 be 指的是 Big Endian，也就是大端。相应地也有 UTF-16le，le 指的是 Little Endian，也就是小端
        Java 的内存编码使用双字节编码 UTF-16be，这不是指 Java 只支持这一种编码方式，而是说 char 这种类型使用 UTF-16be 进行编码。
        char 类型占 16 位，也就是两个字节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 char 来存储。
五、对象操作
    序列化
    序列化就是将一个对象转换成字节序列。方便存储和传输。
        序列化: ObjectOutputStream.writeObject()
        反序列化: ObjectInputStream.readObject()
    不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态

    Serializable
        序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。
六、网络操作
        Java 中的网络支持：
        InetAddress：用于表示网络上的硬件资源，即 IP 地址；
        URL：统一资源定位符；
        Sockets：使用 TCP 协议实现网络通信；
        Datagram：使用 UDP 协议实现网络通信。
    InetAddress  没有公有的构造函数，只能通过静态方法来创建实例。
        InetAddress.getByName(String host);
        InetAddress.getByAddress(byte[] address);
七、NIO
    新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。

    流与块
        I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。

        面向流的 I/O 一次处理一个字节数据：一个输入流产生一个字节数据，一个输出流消费一个字节数据。
        为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的 I/O 通常相当慢。
        面向块的 I/O 一次处理一个数据块，按块处理数据比按流处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。

        I/O 包和 NIO 已经很好地集成了，java.io.* 已经以 NIO 为基础重新实现了，所以现在它可以利用 NIO 的一些特性。
        例如，java.io.* 包中的一些类包含以块的形式读写数据的方法，这使得即使在面向流的系统中，处理速度也会更快。

    通道与缓冲区
        1. 通道
            通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据.

            通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)，
            而通道是双向的，可以用于读、写或者同时用于读写。
            通道包括以下类型：
                FileChannel：从文件中读写数据；
                DatagramChannel：通过 UDP 读写网络中数据；
                SocketChannel：通过 TCP 读写网络中数据；
                ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。
        2. 缓冲区
            发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何数据都要先读到缓冲区中。
            也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。

            缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。
            缓冲区包括以下类型：
                ByteBuffer,CharBuffer,ShortBuffer,IntBuffer,LongBuffer,FloatBuffer,DoubleBuffer

            缓冲区状态变量
                capacity : 最大容量
                position : 当前已经读写的字节数
                limit : 还可以读写的字节数






