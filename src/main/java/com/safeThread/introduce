线程安全:
    多个线程不管以何种方式访问某个类，并且在主调代码中不需要进行同步，都能表现正确的行为。
    线程安全有以下几种实现方式：
        不可变:
            不可变（Immutable）的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。
            只要一个不可变的对象被正确地构建出来，永远也不会看到它在多个线程之中处于不一致的状态。
            多线程环境下，应当尽量使对象成为不可变，来满足线程安全。
        不可变的类型：
            final       关键字修饰的基本数据类型  ->常量
            String      被final修饰的类  不会存在子类 不会存在线程不安全的问题
            枚举类型
            Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。
            但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。

            对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。
               public class ImmutableExample {
                   public static void main(String[] args) {
                       Map<String, Integer> map = new HashMap<>();
                       Map<String, Integer> unmodifiableMap = Collections.unmodifiableMap(map);
                       unmodifiableMap.put("a", 1);
                   }
               }
